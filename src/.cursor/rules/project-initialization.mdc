---
title: "CursorRIPER Direct - Project Initialization"
version: "1.0.0"
date_created: "2025-04-05"
last_updated: "2025-04-05"
framework_component: "initialization"
priority: "high"
scope: "initialization"
---

# CursorRIPER Direct - Project Initialization
# Version 1.0.0

## AI PROCESSING INSTRUCTIONS
This file defines the project initialization process for CursorRIPER Direct. As an AI assistant, you MUST:
- Load this file when a user requests project initialization
- Guide the user through a streamlined setup process
- Create necessary memory bank files
- Focus on getting the project ready for development quickly

## INITIALIZATION OVERVIEW

```mermaid
flowchart TD
    Start([Start]) --> Req[Project Requirements]
    Req --> Tech[Technology Setup]
    Tech --> Memory[Memory Bank Creation]
    Memory --> End[Begin Development]
```

## INITIALIZATION PROCESS

When a user requests project initialization with "INITIALIZE PROJECT" or "/init":

### Step 1: Gather Project Information

Ask the user for essential project information:

1. **Project Name**: What is the name of your project?
2. **Project Purpose**: What problem does this project solve?
3. **Core Requirements**: What are the 3-5 most important features/requirements?
4. **Technology Stack**: What languages, frameworks, or libraries will you use?
5. **Project Timeline**: What's your target timeline for completion?

Keep this conversation focused and efficient - don't overwhelm the user with too many questions.

### Step 2: Technology Setup

Guide the user through basic technology setup:

1. **Project Structure**: Suggest a standard directory structure for their technology stack
2. **Initial Configuration**: Provide configuration file templates if needed
3. **Dependencies**: Suggest key dependencies to include
4. **Development Environment**: Offer quick setup instructions

For example, for a React project:
```
project-root/
‚îú‚îÄ‚îÄ public/
‚îú‚îÄ‚îÄ src/
‚îÇ   ‚îú‚îÄ‚îÄ components/
‚îÇ   ‚îú‚îÄ‚îÄ pages/
‚îÇ   ‚îú‚îÄ‚îÄ styles/
‚îÇ   ‚îî‚îÄ‚îÄ utils/
‚îú‚îÄ‚îÄ memory-bank/
‚îú‚îÄ‚îÄ package.json
‚îú‚îÄ‚îÄ README.md
‚îî‚îÄ‚îÄ .gitignore
```

### Step 3: Memory Bank Creation

Create the memory bank with these core files:

1. **project.md**: Project overview, goals, requirements
2. **architecture.md**: Technical decisions, patterns, structure
3. **progress.md**: Work tracking, task status
4. **notes.md**: Developer context, setup instructions

Guide the user to create the memory-bank directory and populate these files with initial content based on the gathered information.

### Step 4: Begin Development

After initialization:

1. **Summarize Setup**: Review what has been set up
2. **Suggest Next Steps**: Recommend immediate next actions
3. **Transition to RESEARCH**: Switch to RESEARCH mode to begin exploring the project requirements in detail

## MEMORY BANK TEMPLATES

### project.md Template

```markdown
# Project: [PROJECT_NAME]
*Created: [CURRENT_DATE]*

## Overview
[Brief description of the project]

## Goals & Requirements
- [Primary goal 1]
- [Primary goal 2]
- [Primary goal 3]

## Stakeholders
- [Primary user description]
- [Key stakeholder]

## Timeline
- [Next milestone]: [Date]
- [Future milestone]: [Date]
```

### architecture.md Template

```markdown
# Architecture: [PROJECT_NAME]
*Created: [CURRENT_DATE]*

## Stack
- Language: [Language]
- Framework: [Framework]
- Database: [Database]
- Deployment: [Deployment]

## Components
[Brief description of main components]

## Key Decisions
- **[Decision 1]**: [Rationale]
- **[Decision 2]**: [Rationale]
```

### progress.md Template

```markdown
# Progress: [PROJECT_NAME]
*Created: [CURRENT_DATE]*

## Current Focus
[Current work being done]

## Recently Completed
- ‚úÖ Project initialization

## In Progress
- üîÑ Project setup

## Up Next
- ‚è≥ [First feature to implement]
- ‚è≥ [Second feature to implement]

## Issues
- None yet
```

### notes.md Template

```markdown
# Notes: [PROJECT_NAME]
*Created: [CURRENT_DATE]*

## Setup Instructions
[Brief setup instructions]

## Useful Commands
```bash
# Example commands for development
```

## Resources
- [Link to documentation]
- [Link to design files]
```

## INITIALIZATION PHILOSOPHY

The CursorRIPER Direct initialization process emphasizes:

1. **Speed**: Minimize setup time to get to actual development
2. **Simplicity**: Only ask for essential information
3. **Practicality**: Focus on what's needed to begin working
4. **Flexibility**: Adapt to different project types and user needs

The goal is to create just enough structure to support the RIPER workflow without unnecessary overhead.

---

*CursorRIPER Direct: Minimal framework, maximum productivity.*