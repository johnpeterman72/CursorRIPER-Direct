---
description: CursorRIPER Direct - Development Workflow
globs: 
alwaysApply: true
version: "1.0.1"
date_created: "2025-04-05"
last_updated: "2025-04-06"
framework_component: "workflow"
priority: "high"
scope: "development"
---
<!-- Note: Cursor will strip out all the other header information and only keep the first three. -->
# CursorRIPER Direct - Development Workflow
# Version 1.0.1

## AI PROCESSING INSTRUCTIONS
This file defines the development workflow for CursorRIPER Direct. As an AI assistant, you MUST:
- Follow the RIPER workflow methodology for development tasks
- Focus on practical task completion rather than framework technicalities
- Help users move efficiently through each mode
- Adapt the framework to various development tasks without rigid formality

## WORKFLOW OVERVIEW

The CursorRIPER Direct workflow follows the RIPER methodology but with a streamlined, task-oriented approach:

```mermaid
flowchart LR
    R[Research<br>Understand] --> I[Innovate<br>Explore]
    I --> P[Plan<br>Design]
    P --> E[Execute<br>Implement]
    E --> Rev[Review<br>Validate]
    Rev -.-> R
    
    style R fill:#e6f3ff,stroke:#0066cc
    style I fill:#e6ffe6,stroke:#006600
    style P fill:#fff0e6,stroke:#cc6600
    style E fill:#ffe6e6,stroke:#cc0000
    style Rev fill:#f0e6ff,stroke:#6600cc
```

## MODE TRANSITIONS

Mode transitions are triggered by explicit commands:

- "ENTER RESEARCH MODE" or "/research"
- "ENTER INNOVATE MODE" or "/innovate"
- "ENTER PLAN MODE" or "/plan"
- "ENTER EXECUTE MODE" or "/execute"
- "ENTER REVIEW MODE" or "/review"

## MODE-SPECIFIC WORKFLOWS

### RESEARCH Mode Workflow

**Purpose**: Understand the problem and existing code.

```mermaid
flowchart TD
    Start([Start]) --> Understand[Understand Request]
    Understand --> Context[Gather Context]
    Context --> Explore[Explore Codebase]
    Explore --> Ask[Ask Questions]
    Ask --> Analyze[Analyze Findings]
    Analyze --> Document[Document in Memory Bank]
```

**Process**:
1. **Understand User Request**: Clarify what needs to be researched
2. **Gather Context**: Identify relevant files and components
3. **Explore Codebase**: Examine code structure and functionality
4. **Ask Questions**: Seek clarification on ambiguous areas
5. **Analyze Findings**: Synthesize information
6. **Document**: Update memory bank with findings

**When Complete**: Suggest transition to INNOVATE mode when understanding is sufficient.

### INNOVATE Mode Workflow

**Purpose**: Explore potential solutions and approaches.

```mermaid
flowchart TD
    Start([Start]) --> Review[Review Research]
    Review --> Generate[Generate Ideas]
    Generate --> Evaluate[Evaluate Options]
    Evaluate --> Compare[Compare Approaches]
    Compare --> Refine[Refine Best Options]
    Refine --> Document[Document in Memory Bank]
```

**Process**:
1. **Review Research**: Consider findings from RESEARCH mode
2. **Generate Ideas**: Brainstorm multiple solutions
3. **Evaluate Options**: Consider pros/cons of each approach
4. **Compare Approaches**: Analyze trade-offs between options
5. **Refine Best Options**: Focus on most promising approaches
6. **Document**: Update memory bank with design alternatives

**When Complete**: Suggest transition to PLAN mode when a preferred approach emerges.

### PLAN Mode Workflow

**Purpose**: Create detailed implementation specifications.

```mermaid
flowchart TD
    Start([Start]) --> Review[Review Selected Approach]
    Review --> Questions[Ask Clarifying Questions]
    Questions --> Analyze[Analyze Dependencies]
    Analyze --> Detail[Detail Implementation Steps]
    Detail --> Checklist[Create Checklist]
    Checklist --> Confirm[Confirm With User]
    Confirm --> Document[Document in Memory Bank]
```

**Process**:
1. **Review Selected Approach**: Confirm the approach from INNOVATE mode
2. **Ask Clarifying Questions**: Resolve any ambiguities
3. **Analyze Dependencies**: Identify affected components and dependencies
4. **Detail Implementation Steps**: Create step-by-step implementation plan
5. **Create Checklist**: Convert plan to numbered checklist
6. **Confirm With User**: Get approval for the plan
7. **Document**: Update memory bank with the plan

**When Complete**: Await explicit transition to EXECUTE mode after plan approval.

### EXECUTE Mode Workflow

**Purpose**: Implement the approved plan.

```mermaid
flowchart TD
    Start([Start]) --> Review[Review Plan]
    Review --> Step[Implement Next Step]
    Step --> Check{Issue Found?}
    Check -->|Yes| Return[Return to PLAN]
    Check -->|No| Progress[Update Progress]
    Progress --> Next{More Steps?}
    Next -->|Yes| Step
    Next -->|No| Final[Final Verification]
    Final --> Document[Document in Memory Bank]
```

**Process**:
1. **Review Plan**: Ensure understanding of approved plan
2. **Implement Next Step**: Execute one item from checklist
3. **Check for Issues**: Verify implementation works as expected
4. **Update Progress**: Mark step as complete, update progress
5. **Continue or Complete**: Move to next step or finish implementation
6. **Final Verification**: Ensure all steps are completed correctly
7. **Document**: Update memory bank with implementation details

**When Complete**: Suggest transition to REVIEW mode after implementation is complete.

### REVIEW Mode Workflow

**Purpose**: Validate implementation against the plan.

```mermaid
flowchart TD
    Start([Start]) --> Plan[Review Plan]
    Plan --> Implementation[Examine Implementation]
    Implementation --> Compare[Compare Against Plan]
    Compare --> Issues{Deviations?}
    Issues -->|Yes| Flag[Flag Deviations]
    Issues -->|No| Confirm[Confirm Matches]
    Flag --> Severity{Significant?}
    Severity -->|Yes| Return[Return to PLAN]
    Severity -->|No| Document[Document Minor Deviations]
    Confirm --> Document
    Document --> Report[Report Results]
```

**Process**:
1. **Review Plan**: Refresh understanding of the approved plan
2. **Examine Implementation**: Look at the actual implementation
3. **Compare Against Plan**: Check if implementation matches plan
4. **Flag Deviations**: Mark any differences between plan and implementation
5. **Assess Severity**: Determine if deviations require returning to PLAN
6. **Document**: Update memory bank with review findings
7. **Report Results**: Provide clear verdict on implementation accuracy

**When Complete**: Suggest next steps based on review findings.

## PRACTICAL APPLICATION

The CursorRIPER Direct workflow adapts to different types of tasks:

### Feature Development
1. **RESEARCH**: Understand requirements and existing codebase
2. **INNOVATE**: Explore implementation approaches
3. **PLAN**: Create detailed implementation plan
4. **EXECUTE**: Build the feature
5. **REVIEW**: Validate implementation meets requirements

### Bug Fixing
1. **RESEARCH**: Reproduce and understand the bug
2. **INNOVATE**: Explore potential fixes
3. **PLAN**: Design targeted fix strategy
4. **EXECUTE**: Implement bug fix
5. **REVIEW**: Verify bug is resolved without side effects

### Refactoring
1. **RESEARCH**: Understand current implementation and pain points
2. **INNOVATE**: Explore refactoring approaches
3. **PLAN**: Create step-by-step refactoring plan
4. **EXECUTE**: Perform refactoring
5. **REVIEW**: Ensure functionality is preserved

## MEMORY BANK INTEGRATION

After each significant mode transition or progress milestone:
1. Update relevant memory bank files:
   - `memory-bank/project.md`: Update requirements or goals if they change
   - `memory-bank/architecture.md`: Document new technical decisions
   - `memory-bank/progress.md`: Update task status and next steps
   - `memory-bank/notes.md`: Add useful context or learnings

Use memory bank content to inform each mode's operations, creating a continuous feedback loop.

## WORKFLOW PRINCIPLES

The CursorRIPER Direct workflow emphasizes:

1. **Task Orientation**: Focus on completing development tasks efficiently
2. **Adaptability**: Adjust the process to fit different types of work
3. **Practical Progress**: Move between modes as needed to maintain momentum
4. **Minimalist Documentation**: Document what's necessary, not everything
5. **User Agency**: Respect the user's preferred workflow while providing structure

---

*CursorRIPER Direct: Minimal framework, maximum productivity.*
